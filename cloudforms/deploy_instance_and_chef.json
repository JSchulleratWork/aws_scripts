{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Deploy a single EC2 instance and then configure it with chef. Optionally attach an elastic IP or an EBS Volume",
  "Parameters" : {

    "KeyName": {
      "Description" : "Name of an existing EC2 key pair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default" : "chris",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "InstanceType" : {
      "Description" : "Web Server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "ImageId" : {
      "Description" : "AMI ID for the instances",
      "Type" : "String",
      "Default" : "ami-0d4cfd66"
    },
    "ChefRunList" : {
      "Description" : "Enter the Chef Runlist",
      "Type" : "String"
    },
    "HostedZone" : {
      "Description" : "DNS Domain to register this instance with. (must  end in a dot!!!!)",
      "Default" : "room17.com.",
      "Type" : "String"
    },
    "ElasticIPId" : {
      "Description" : "Enter the ID of the Elastic IP to attach to the instance. (Optional)",
      "Type" : "String"
    },
    "HomeEBSId" : {
      "Description" : "Enter the ID of the EBS Volume to attach to the instance. (Optional)",
      "Type" : "String"
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  }
    },
    "AWSRegionArch2AMI" : {
      "us-east-1"        : {"PV64" : "ami-0f4cfd64", "HVM64" : "ami-0d4cfd66", "HVMG2" : "ami-5b05ba30"},
      "us-west-2"        : {"PV64" : "ami-d3c5d1e3", "HVM64" : "ami-d5c5d1e5", "HVMG2" : "ami-a9d6c099"},
      "us-west-1"        : {"PV64" : "ami-85ea13c1", "HVM64" : "ami-87ea13c3", "HVMG2" : "ami-37827a73"},
      "eu-west-1"        : {"PV64" : "ami-d6d18ea1", "HVM64" : "ami-e4d18e93", "HVMG2" : "ami-72a9f105"},
      "eu-central-1"     : {"PV64" : "ami-a4b0b7b9", "HVM64" : "ami-a6b0b7bb", "HVMG2" : "ami-a6c9cfbb"},
      "ap-northeast-1"   : {"PV64" : "ami-1a1b9f1a", "HVM64" : "ami-1c1b9f1c", "HVMG2" : "ami-f644c4f6"},
      "ap-southeast-1"   : {"PV64" : "ami-d24b4280", "HVM64" : "ami-d44b4286", "HVMG2" : "ami-12b5bc40"},
      "ap-southeast-2"   : {"PV64" : "ami-ef7b39d5", "HVM64" : "ami-db7b39e1", "HVMG2" : "ami-b3337e89"},
      "sa-east-1"        : {"PV64" : "ami-5b098146", "HVM64" : "ami-55098148", "HVMG2" : "NOT_SUPPORTED"},
      "cn-north-1"       : {"PV64" : "ami-bec45887", "HVM64" : "ami-bcc45885", "HVMG2" : "NOT_SUPPORTED"}
    },
    "ChefInfo" : {
      "ChefValidatorKeyBucket"  : { "value" : "CHANGEMETOYOURKEY-S3BUCKET"},
      "ChefValidatorKeyObject"  : { "value" : "CHANGEMETOYOURKEY"},
      "ChefValidatorClientName" : { "value" : "CHANGMETOYOURORGANIZATION-validator"},
      "ChefAPIURL"              : { "value" : "https://api.opscode.com/organizations/CHANGMETOYOURORGANIZATION"}
    }
  },

  "Conditions" : {
    "AttachHomeEBSConditional" : { "Fn::Not" : [{ "Fn::Equals" : [ {"Ref" : "HomeEBSId"}, "" ]}]},
    "AttachElasticIPConditional" : { "Fn::Not" : [{ "Fn::Equals" : [ {"Ref" : "ElasticIPId"}, "" ]}]}
  },

  "Resources" : {

    "EC2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Count" : "1",
          "Timeout" : "PT5M"
        }
      },
      "Metadata" : {
        "AWS::CloudFormation::Authentication": {
          "S3Access" : {
            "type" : "S3",
            "buckets": [ { "Fn::FindInMap" : [ "ChefInfo", "ChefValidatorKeyBucket", "value" ] } ],
            "roleName": "vpsRole"
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "cfn_install" : ["mount_home", "yum_update", "install_cfn", "install_chefdk", "install_chef",  "run_chef"]
          },

        "mount_home" : {
            "Condition" : "AttachHomeEBSConditional",
            "commands" : {
              "01_mountdir" : {
                "command" : "if [ -f /dev/xvdb1 ] ; then mount /dev/xvdb1 /home ; fi"
              }
            }
          },
        "yum_update" : {
            "commands" : {
              "02_yumupdate" : {
                "command" : "yum update -y"
              }
            }
          },
          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource EC2Instance ",
                          "         --configsets cfn_install ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},          
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },
          "install_chef" : {
            "files" : {
              "/tmp/install.sh" : {
                "source" : "https://www.opscode.com/chef/install.sh",
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/chef/validation.pem" : {
                "source" : { "Fn::FindInMap" : [ "ChefInfo", "ChefValidatorKeyObject", "value" ] },
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/chef/client.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "chef_server_url '", { "Fn::FindInMap" : [ "ChefInfo", "ChefAPIURL", "value" ] }, "'\n",
                  "validation_client_name '", { "Fn::FindInMap" : [ "ChefInfo", "ChefValidatorClientName", "value" ] }, "'\n",
                  "verify_api_cert true\n",
                  "encrypted_data_bag_secret '/etc/chef/encrypted_data_bag_secret'\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_make_chef_readable" : {
                "command" : "chmod +rx /etc/chef"
              },
              "02_install_chef" : {
                "command" : "bash /tmp/install.sh",
                "cwd"  : "/etc/chef"
              },
              "03_register_node" : {
                "command" : "chef-client",
                "cwd" : "/tmp",
                "env" : { "HOME" : "/root" }
              }
            }
          },

          "install_chefdk" : {
            "packages" : {
              "rpm" : {
                "chefdk" : "https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chefdk-0.2.0-2.el6.x86_64.rpm"
              }
            }
          },

          "run_chef" : {
            "commands" : {
              "01_run_chef_client" : { 
                "command" : 
                    { "Fn::Join": [ "", [ "chef-client -r '", { "Ref" : "ChefRunList" }, "'"]]},
                "cwd" : "/root",
                "env" : { "HOME" : "/root" }
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Ref" : "ImageId" }, 
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "WebServerSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "IamInstanceProfile" : "vpsRole",
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                       "#!/bin/bash -xe\n",
                       "yum update -y aws-cfn-bootstrap\n",

                       "/opt/aws/bin/cfn-init -v ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource EC2Instance ",
                       "         --configsets cfn_install ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n",

                       "/opt/aws/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource EC2Instance ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}},
        "Tags" : [ {
          "Key" : "Name",
          "Value" : { "Ref" : "AWS::StackName" }
        } ]
      }
    },

    "VPSIPAssoc" : {
         "Type" : "AWS::EC2::EIPAssociation",
         "Condition" : "AttachElasticIPConditional",
         "Properties" : {
            "InstanceId" : { "Ref" : "EC2Instance" },
            "AllocationId" : { "Ref" : "ElasticIPId" }
         }
     },

    "AttachHomeEBS" : {
       "Type":"AWS::EC2::VolumeAttachment",
       "Condition" : "AttachHomeEBSConditional",
       "Properties" : {
          "Device" : "/dev/sdb",
          "InstanceId" : { "Ref" : "EC2Instance" },
          "VolumeId" : { "Ref" : "HomeEBSId" } 
       }
    },

    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "MYUSUALIP/24"}
        ]
      }
    },
    "UpdateDNS" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : {"Ref" : "HostedZone"},
        "Name": {
            "Fn::Join" : [ "", [
               { "Ref" : "AWS::StackName" }, ".",
               { "Ref" : "HostedZone"} 
            ] ]
         },
        "Comment" : "Route53 Address of my Minecraft Server",
        "Type": "A",
        "TTL": "66", 
        "ResourceRecords" : [
            { "Fn::GetAtt" : [ "EC2Instance", "PublicIp" ] }
         ]
      }
    }
  },

  "Outputs" : {
    "InstanceId": {
      "Description": "InstanceId of the newly created EC2 instance",
      "Value": {
        "Ref": "EC2Instance"
      }
    },
    "PublicIP": {
      "Description": "Public IP address of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [ "EC2Instance", "PublicIp" ]
      }
    }
  }
}
